{"version":3,"sources":["bootstrap-treeview.js"],"names":[],"mappingsfile":"bootstrap-treeview.min.js","sourcesContent":["/* =========================================================\n * bootstrap-treeview.js v1.2.0\n * =========================================================\n * Copyright 2013 Jonathan Miles\n * Project URL : http://www.jondmiles.com/bootstrap-treeview\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================= */\n\n;(function ($, window, document, undefined) {\n\n\t/*global jQuery, console*/\n\n\t'use strict';\n\n\tvar pluginName = 'treeview';\n\n\tvar _default = {};\n\n\t_default.settings = {\n\n\t\tinjectStyle: true,\n\n\t\tlevels: 2,\n\n\t\texpandIcon: 'glyphicon glyphicon-plus',\n\t\tcollapseIcon: 'glyphicon glyphicon-minus',\n\t\temptyIcon: 'glyphicon',\n\t\tnodeIcon: '',\n\t\tselectedIcon: '',\n\t\tcheckedIcon: 'fa fa-check-square-o',\n\t\tuncheckedIcon: 'fa fa-square-o',\n\n\t\tcolor: undefined, // '#000000',\n\t\tbackColor: undefined, // '#FFFFFF',\n\t\tborderColor: undefined, // '#dddddd',\n\t\tonhoverColor: '#F5F5F5',\n\t\tsearchResultColor: '#D9534F',\n\t\tsearchResultBackColor: undefined, //'#FFFFFF',\n\n\t\tenableLinks: false,\n\t\thighlightSelected: true,\n\t\thighlightSearchResults: true,\n\t\tshowBorder: true,\n\t\tshowIcon: true,\n\t\tshowCheckbox: true,\n\t\tshowTags: false,\n\t\tmultiSelect: false,\n\n\t\t// Event handlers\n\t\tonNodeChecked: undefined,\n\t\tonNodeCollapsed: undefined,\n\t\tonNodeDisabled: undefined,\n\t\tonNodeEnabled: undefined,\n\t\tonNodeExpanded: undefined,\n\t\tonNodeSelected: undefined,\n\t\tonNodeUnchecked: undefined,\n\t\tonNodeUnselected: undefined,\n\t\tonSearchComplete: undefined,\n\t\tonSearchCleared: undefined\n\t};\n\n\t_default.options = {\n\t\tsilent: false,\n\t\tignoreChildren: true\n\t};\n\n\t_default.searchOptions = {\n\t\tignoreCase: true,\n\t\texactMatch: false,\n\t\trevealResults: true\n\t};\n\n\tvar Tree = function (element, options) {\n\n\t\tthis.$element = $(element);\n\t\tthis.elementId = element.id;\n\t\tthis.styleId = this.elementId + '-style';\n\n\t\tthis.init(options);\n\n\t\treturn {\n\n\t\t\t// Options (public access)\n\t\t\toptions: this.options,\n\n\t\t\t// Initialize / destroy methods\n\t\t\tinit: $.proxy(this.init, this),\n\t\t\tremove: $.proxy(this.remove, this),\n\n\t\t\t// Get methods\n\t\t\tgetNode: $.proxy(this.getNode, this),\n\t\t\tgetParent: $.proxy(this.getParent, this),\n\t\t\tgetSiblings: $.proxy(this.getSiblings, this),\n\t\t\tgetSelected: $.proxy(this.getSelected, this),\n\t\t\tgetUnselected: $.proxy(this.getUnselected, this),\n\t\t\tgetExpanded: $.proxy(this.getExpanded, this),\n\t\t\tgetCollapsed: $.proxy(this.getCollapsed, this),\n\t\t\tgetChecked: $.proxy(this.getChecked, this),\n\t\t\tgetUnchecked: $.proxy(this.getUnchecked, this),\n\t\t\tgetDisabled: $.proxy(this.getDisabled, this),\n\t\t\tgetEnabled: $.proxy(this.getEnabled, this),\n\n\t\t\t// Select methods\n\t\t\tselectNode: $.proxy(this.selectNode, this),\n\t\t\tunselectNode: $.proxy(this.unselectNode, this),\n\t\t\ttoggleNodeSelected: $.proxy(this.toggleNodeSelected, this),\n\n\t\t\t// Expand / collapse methods\n\t\t\tcollapseAll: $.proxy(this.collapseAll, this),\n\t\t\tcollapseNode: $.proxy(this.collapseNode, this),\n\t\t\texpandAll: $.proxy(this.expandAll, this),\n\t\t\texpandNode: $.proxy(this.expandNode, this),\n\t\t\ttoggleNodeExpanded: $.proxy(this.toggleNodeExpanded, this),\n\t\t\trevealNode: $.proxy(this.revealNode, this),\n\n\t\t\t// Expand / collapse methods\n\t\t\tcheckAll: $.proxy(this.checkAll, this),\n\t\t\tcheckNode: $.proxy(this.checkNode, this),\n\t\t\tuncheckAll: $.proxy(this.uncheckAll, this),\n\t\t\tuncheckNode: $.proxy(this.uncheckNode, this),\n\t\t\ttoggleNodeChecked: $.proxy(this.toggleNodeChecked, this),\n\n\t\t\t// Disable / enable methods\n\t\t\tdisableAll: $.proxy(this.disableAll, this),\n\t\t\tdisableNode: $.proxy(this.disableNode, this),\n\t\t\tenableAll: $.proxy(this.enableAll, this),\n\t\t\tenableNode: $.proxy(this.enableNode, this),\n\t\t\ttoggleNodeDisabled: $.proxy(this.toggleNodeDisabled, this),\n\n\t\t\t// Search methods\n\t\t\tsearch: $.proxy(this.search, this),\n\t\t\tclearSearch: $.proxy(this.clearSearch, this)\n\t\t};\n\t};\n\n\tTree.prototype.init = function (options) {\n\n\t\tthis.tree = [];\n\t\tthis.nodes = [];\n\n\t\tif (options.data) {\n\t\t\tif (typeof options.data === 'string') {\n\t\t\t\toptions.data = $.parseJSON(options.data);\n\t\t\t}\n\t\t\tthis.tree = $.extend(true, [], options.data);\n\t\t\tdelete options.data;\n\t\t}\n\t\tthis.options = $.extend({}, _default.settings, options);\n\n\t\tthis.destroy();\n\t\tthis.subscribeEvents();\n\t\tthis.setInitialStates({ nodes: this.tree }, 0);\n\t\tthis.render();\n\t};\n\n\tTree.prototype.remove = function () {\n\t\tthis.destroy();\n\t\t$.removeData(this, pluginName);\n\t\t$('#' + this.styleId).remove();\n\t};\n\n\tTree.prototype.destroy = function () {\n\n\t\tif (!this.initialized) return;\n\n\t\tthis.$wrapper.remove();\n\t\tthis.$wrapper = null;\n\n\t\t// Switch off events\n\t\tthis.unsubscribeEvents();\n\n\t\t// Reset this.initialized flag\n\t\tthis.initialized = false;\n\t};\n\n\tTree.prototype.unsubscribeEvents = function () {\n\n\t\tthis.$element.off('click');\n\t\tthis.$element.off('nodeChecked');\n\t\tthis.$element.off('nodeCollapsed');\n\t\tthis.$element.off('nodeDisabled');\n\t\tthis.$element.off('nodeEnabled');\n\t\tthis.$element.off('nodeExpanded');\n\t\tthis.$element.off('nodeSelected');\n\t\tthis.$element.off('nodeUnchecked');\n\t\tthis.$element.off('nodeUnselected');\n\t\tthis.$element.off('searchComplete');\n\t\tthis.$element.off('searchCleared');\n\t};\n\n\tTree.prototype.subscribeEvents = function () {\n\n\t\tthis.unsubscribeEvents();\n\n\t\tthis.$element.on('click', $.proxy(this.clickHandler, this));\n\n\t\tif (typeof (this.options.onNodeChecked) === 'function') {\n\t\t\tthis.$element.on('nodeChecked', this.options.onNodeChecked);\n\t\t}\n\n\t\tif (typeof (this.options.onNodeCollapsed) === 'function') {\n\t\t\tthis.$element.on('nodeCollapsed', this.options.onNodeCollapsed);\n\t\t}\n\n\t\tif (typeof (this.options.onNodeDisabled) === 'function') {\n\t\t\tthis.$element.on('nodeDisabled', this.options.onNodeDisabled);\n\t\t}\n\n\t\tif (typeof (this.options.onNodeEnabled) === 'function') {\n\t\t\tthis.$element.on('nodeEnabled', this.options.onNodeEnabled);\n\t\t}\n\n\t\tif (typeof (this.options.onNodeExpanded) === 'function') {\n\t\t\tthis.$element.on('nodeExpanded', this.options.onNodeExpanded);\n\t\t}\n\n\t\tif (typeof (this.options.onNodeSelected) === 'function') {\n\t\t\tthis.$element.on('nodeSelected', this.options.onNodeSelected);\n\t\t}\n\n\t\tif (typeof (this.options.onNodeUnchecked) === 'function') {\n\t\t\tthis.$element.on('nodeUnchecked', this.options.onNodeUnchecked);\n\t\t}\n\n\t\tif (typeof (this.options.onNodeUnselected) === 'function') {\n\t\t\tthis.$element.on('nodeUnselected', this.options.onNodeUnselected);\n\t\t}\n\n\t\tif (typeof (this.options.onSearchComplete) === 'function') {\n\t\t\tthis.$element.on('searchComplete', this.options.onSearchComplete);\n\t\t}\n\n\t\tif (typeof (this.options.onSearchCleared) === 'function') {\n\t\t\tthis.$element.on('searchCleared', this.options.onSearchCleared);\n\t\t}\n\t};\n\n\t/*\n\t\tRecurse the tree structure and ensure all nodes have\n\t\tvalid initial states.  User defined states will be preserved.\n\t\tFor performance we also take this opportunity to\n\t\tindex nodes in a flattened structure\n\t*/\n\tTree.prototype.setInitialStates = function (node, level) {\n\n\t\tif (!node.nodes) return;\n\t\tlevel += 1;\n\n\t\tvar parent = node;\n\t\tvar _this = this;\n\t\t$.each(node.nodes, function checkStates(index, node) {\n\n\t\t\t// nodeId : unique, incremental identifier\n\t\t\tnode.nodeId = _this.nodes.length;\n\n\t\t\t// parentId : transversing up the tree\n\t\t\tnode.parentId = parent.nodeId;\n\n\t\t\t// if not provided set selectable default value\n\t\t\tif (!node.hasOwnProperty('selectable')) {\n\t\t\t\tnode.selectable = true;\n\t\t\t}\n\n\t\t\t// where provided we should preserve states\n\t\t\tnode.state = node.state || {};\n\n\t\t\t// set checked state; unless set always false\n\t\t\tif (!node.state.hasOwnProperty('checked')) {\n\t\t\t\tnode.state.checked = false;\n\t\t\t}\n\n\t\t\t// set enabled state; unless set always false\n\t\t\tif (!node.state.hasOwnProperty('disabled')) {\n\t\t\t\tnode.state.disabled = false;\n\t\t\t}\n\n\t\t\t// set expanded state; if not provided based on levels\n\t\t\tif (!node.state.hasOwnProperty('expanded')) {\n\t\t\t\tif (!node.state.disabled &&\n\t\t\t\t\t\t(level < _this.options.levels) &&\n\t\t\t\t\t\t(node.nodes && node.nodes.length > 0)) {\n\t\t\t\t\tnode.state.expanded = true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnode.state.expanded = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// set selected state; unless set always false\n\t\t\tif (!node.state.hasOwnProperty('selected')) {\n\t\t\t\tnode.state.selected = false;\n\t\t\t}\n\n\t\t\t// index nodes in a flattened structure for use later\n\t\t\t_this.nodes.push(node);\n\n\t\t\t// recurse child nodes and transverse the tree\n\t\t\tif (node.nodes) {\n\t\t\t\t_this.setInitialStates(node, level);\n\t\t\t}\n\t\t});\n\t};\n\n\tTree.prototype.clickHandler = function (event) {\n\n\t\tif (!this.options.enableLinks) event.preventDefault();\n\n\t\tvar target = $(event.target);\n\t\tvar node = this.findNode(target);\n\t\tif (!node || node.state.disabled) return;\n\t\t\n\t\tvar classList = target.attr('class') ? target.attr('class').split(' ') : [];\n\t\tif ((classList.indexOf('expand-icon') !== -1)) {\n\n\t\t\tthis.toggleExpandedState(node, _default.options);\n\t\t\tthis.render();\n\t\t}\n\t\telse if ((classList.indexOf('check-icon') !== -1)) {\n\t\t\t\n\t\t\tthis.toggleCheckedState(node, _default.options);\n\t\t\tthis.render();\n\t\t}\n\t\telse {\n\t\t\t\n\t\t\tif (node.selectable) {\n\t\t\t\tthis.toggleSelectedState(node, _default.options);\n\t\t\t} else {\n\t\t\t\tthis.toggleExpandedState(node, _default.options);\n\t\t\t}\n\n\t\t\tthis.render();\n\t\t}\n\t};\n\n\t// Looks up the DOM for the closest parent list item to retrieve the\n\t// data attribute nodeid, which is used to lookup the node in the flattened structure.\n\tTree.prototype.findNode = function (target) {\n\n\t\tvar nodeId = target.closest('li.list-group-item').attr('data-nodeid');\n\t\tvar node = this.nodes[nodeId];\n\n\t\tif (!node) {\n\t\t\tconsole.log('Error: node does not exist');\n\t\t}\n\t\treturn node;\n\t};\n\n\tTree.prototype.toggleExpandedState = function (node, options) {\n\t\tif (!node) return;\n\t\tthis.setExpandedState(node, !node.state.expanded, options);\n\t};\n\n\tTree.prototype.setExpandedState = function (node, state, options) {\n\n\t\tif (state === node.state.expanded) return;\n\n\t\tif (state && node.nodes) {\n\n\t\t\t// Expand a node\n\t\t\tnode.state.expanded = true;\n\t\t\tif (!options.silent) {\n\t\t\t\tthis.$element.trigger('nodeExpanded', $.extend(true, {}, node));\n\t\t\t}\n\t\t}\n\t\telse if (!state) {\n\n\t\t\t// Collapse a node\n\t\t\tnode.state.expanded = false;\n\t\t\tif (!options.silent) {\n\t\t\t\tthis.$element.trigger('nodeCollapsed', $.extend(true, {}, node));\n\t\t\t}\n\n\t\t\t// Collapse child nodes\n\t\t\tif (node.nodes && !options.ignoreChildren) {\n\t\t\t\t$.each(node.nodes, $.proxy(function (index, node) {\n\t\t\t\t\tthis.setExpandedState(node, false, options);\n\t\t\t\t}, this));\n\t\t\t}\n\t\t}\n\t};\n\n\tTree.prototype.toggleSelectedState = function (node, options) {\n\t\tif (!node) return;\n\t\tthis.setSelectedState(node, !node.state.selected, options);\n\t};\n\n\tTree.prototype.setSelectedState = function (node, state, options) {\n\n\t\tif (state === node.state.selected) return;\n\n\t\tif (state) {\n\n\t\t\t// If multiSelect false, unselect previously selected\n\t\t\tif (!this.options.multiSelect) {\n\t\t\t\t$.each(this.findNodes('true', 'g', 'state.selected'), $.proxy(function (index, node) {\n\t\t\t\t\tthis.setSelectedState(node, false, options);\n\t\t\t\t}, this));\n\t\t\t}\n\n\t\t\t// Continue selecting node\n\t\t\tnode.state.selected = true;\n\t\t\tif (!options.silent) {\n\t\t\t\tthis.$element.trigger('nodeSelected', $.extend(true, {}, node));\n\t\t\t}\n\t\t}\n\t\telse {\n\n\t\t\t// Unselect node\n\t\t\tnode.state.selected = false;\n\t\t\tif (!options.silent) {\n\t\t\t\tthis.$element.trigger('nodeUnselected', $.extend(true, {}, node));\n\t\t\t}\n\t\t}\n\t};\n\n\tTree.prototype.toggleCheckedState = function (node, options) {\n\t\tif (!node) return;\n\t\tthis.setCheckedState(node, !node.state.checked, options);\n\t};\n\n\tTree.prototype.setCheckedState = function (node, state, options) {\n\n\t\tif (state === node.state.checked) return;\n\n\t\tif (state) {\n\n\t\t\t// Check node\n\t\t\tnode.state.checked = true;\n\n\t\t\tif (!options.silent) {\n\t\t\t\tthis.$element.trigger('nodeChecked', $.extend(true, {}, node));\n\t\t\t}\n\t\t}\n\t\telse {\n\n\t\t\t// Uncheck node\n\t\t\tnode.state.checked = false;\n\t\t\tif (!options.silent) {\n\t\t\t\tthis.$element.trigger('nodeUnchecked', $.extend(true, {}, node));\n\t\t\t}\n\t\t}\n\t};\n\n\tTree.prototype.setDisabledState = function (node, state, options) {\n\n\t\tif (state === node.state.disabled) return;\n\n\t\tif (state) {\n\n\t\t\t// Disable node\n\t\t\tnode.state.disabled = true;\n\n\t\t\t// Disable all other states\n\t\t\tthis.setExpandedState(node, false, options);\n\t\t\tthis.setSelectedState(node, false, options);\n\t\t\tthis.setCheckedState(node, false, options);\n\n\t\t\tif (!options.silent) {\n\t\t\t\tthis.$element.trigger('nodeDisabled', $.extend(true, {}, node));\n\t\t\t}\n\t\t}\n\t\telse {\n\n\t\t\t// Enabled node\n\t\t\tnode.state.disabled = false;\n\t\t\tif (!options.silent) {\n\t\t\t\tthis.$element.trigger('nodeEnabled', $.extend(true, {}, node));\n\t\t\t}\n\t\t}\n\t};\n\n\tTree.prototype.render = function () {\n\n\t\tif (!this.initialized) {\n\n\t\t\t// Setup first time only components\n\t\t\tthis.$element.addClass(pluginName);\n\t\t\tthis.$wrapper = $(this.template.list);\n\n\t\t\tthis.injectStyle();\n\n\t\t\tthis.initialized = true;\n\t\t}\n\n\t\tthis.$element.empty().append(this.$wrapper.empty());\n\n\t\t// Build tree\n\t\tthis.buildTree(this.tree, 0);\n\t};\n\n\t// Starting from the root node, and recursing down the\n\t// structure we build the tree one node at a time\n\tTree.prototype.buildTree = function (nodes, level) {\n\n\t\tif (!nodes) return;\n\t\tlevel += 1;\n\n\t\tvar _this = this;\n\t\t$.each(nodes, function addNodes(id, node) {\n\n\t\t\tvar treeItem = $(_this.template.item)\n\t\t\t\t.addClass('node-' + _this.elementId)\n\t\t\t\t.addClass(node.state.checked ? 'node-checked' : '')\n\t\t\t\t.addClass(node.state.disabled ? 'node-disabled': '')\n\t\t\t\t.addClass(node.state.selected ? 'node-selected' : '')\n\t\t\t\t.addClass(node.searchResult ? 'search-result' : '') \n\t\t\t\t.attr('data-nodeid', node.nodeId)\n\t\t\t\t.attr('style', _this.buildStyleOverride(node));\n\n\t\t\t// Add indent/spacer to mimic tree structure\n\t\t\tfor (var i = 0; i < (level - 1); i++) {\n\t\t\t\ttreeItem.append(_this.template.indent);\n\t\t\t}\n\n\t\t\t// Add expand, collapse or empty spacer icons\n\t\t\tvar classList = [];\n\t\t\tif (node.nodes) {\n\t\t\t\tclassList.push('expand-icon');\n\t\t\t\tif (node.state.expanded) {\n\t\t\t\t\tclassList.push(_this.options.collapseIcon);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tclassList.push(_this.options.expandIcon);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tclassList.push(_this.options.emptyIcon);\n\t\t\t}\n\n\t\t\ttreeItem\n\t\t\t\t.append($(_this.template.icon)\n\t\t\t\t\t.addClass(classList.join(' '))\n\t\t\t\t);\n\n\n\t\t\t// Add node icon\n\t\t\tif (_this.options.showIcon) {\n\t\t\t\t\n\t\t\t\tvar classList = ['node-icon'];\n\n\t\t\t\tclassList.push(node.icon || _this.options.nodeIcon);\n\t\t\t\tif (node.state.selected) {\n\t\t\t\t\tclassList.pop();\n\t\t\t\t\tclassList.push(node.selectedIcon || _this.options.selectedIcon || \n\t\t\t\t\t\t\t\t\tnode.icon || _this.options.nodeIcon);\n\t\t\t\t}\n\n\t\t\t\ttreeItem\n\t\t\t\t\t.append($(_this.template.icon)\n\t\t\t\t\t\t.addClass(classList.join(' '))\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Add check / unchecked icon\n\t\t\tif (_this.options.showCheckbox) {\n\n\t\t\t\tvar classList = ['check-icon'];\n\t\t\t\tif (node.state.checked) {\n\t\t\t\t\tclassList.push(_this.options.checkedIcon); \n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tclassList.push(_this.options.uncheckedIcon);\n\t\t\t\t}\n\n\t\t\t\ttreeItem\n\t\t\t\t\t.append($(_this.template.icon)\n\t\t\t\t\t\t.addClass(classList.join(' '))\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Add text\n\t\t\tif (_this.options.enableLinks) {\n\t\t\t\t// Add hyperlink\n\t\t\t\ttreeItem\n\t\t\t\t\t.append($(_this.template.link)\n\t\t\t\t\t\t.attr('href', node.href)\n\t\t\t\t\t\t.append(node.text)\n\t\t\t\t\t);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// otherwise just text\n\t\t\t\ttreeItem\n\t\t\t\t\t.append(node.text);\n\t\t\t}\n\n\t\t\t// Add tags as badges\n\t\t\tif (_this.options.showTags && node.tags) {\n\t\t\t\t$.each(node.tags, function addTag(id, tag) {\n\t\t\t\t\ttreeItem\n\t\t\t\t\t\t.append($(_this.template.badge)\n\t\t\t\t\t\t\t.append(tag)\n\t\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Add item to the tree\n\t\t\t_this.$wrapper.append(treeItem);\n\n\t\t\t// Recursively add child ndoes\n\t\t\tif (node.nodes && node.state.expanded && !node.state.disabled) {\n\t\t\t\treturn _this.buildTree(node.nodes, level);\n\t\t\t}\n\t\t});\n\t};\n\n\t// Define any node level style override for\n\t// 1. selectedNode\n\t// 2. node|data assigned color overrides\n\tTree.prototype.buildStyleOverride = function (node) {\n\n\t\tif (node.state.disabled) return '';\n\n\t\tvar color = node.color;\n\t\tvar backColor = node.backColor;\n\n\t\tif (this.options.highlightSelected && node.state.selected) {\n\t\t\tif (this.options.selectedColor) {\n\t\t\t\tcolor = this.options.selectedColor;\n\t\t\t}\n\t\t\tif (this.options.selectedBackColor) {\n\t\t\t\tbackColor = this.options.selectedBackColor;\n\t\t\t}\n\t\t}\n\n\t\tif (this.options.highlightSearchResults && node.searchResult && !node.state.disabled) {\n\t\t\tif (this.options.searchResultColor) {\n\t\t\t\tcolor = this.options.searchResultColor;\n\t\t\t}\n\t\t\tif (this.options.searchResultBackColor) {\n\t\t\t\tbackColor = this.options.searchResultBackColor;\n\t\t\t}\n\t\t}\n\n\t\treturn 'color:' + color +\n\t\t\t';background-color:' + backColor + ';';\n\t};\n\n\t// Add inline style into head\n\tTree.prototype.injectStyle = function () {\n\n\t\tif (this.options.injectStyle && !document.getElementById(this.styleId)) {\n\t\t\t$('<style type=\"text/css\" id=\"' + this.styleId + '\"> ' + this.buildStyle() + ' </style>').appendTo('head');\n\t\t}\n\t};\n\n\t// Construct trees style based on user options\n\tTree.prototype.buildStyle = function () {\n\n\t\tvar style = '.node-' + this.elementId + '{';\n\n\t\tif (this.options.color) {\n\t\t\tstyle += 'color:' + this.options.color + ';';\n\t\t}\n\n\t\tif (this.options.backColor) {\n\t\t\tstyle += 'background-color:' + this.options.backColor + ';';\n\t\t}\n\n\t\tif (!this.options.showBorder) {\n\t\t\tstyle += 'border:none;';\n\t\t}\n\t\telse if (this.options.borderColor) {\n\t\t\tstyle += 'border:1px solid ' + this.options.borderColor + ';';\n\t\t}\n\t\tstyle += '}';\n\n\t\tif (this.options.onhoverColor) {\n\t\t\tstyle += '.node-' + this.elementId + ':not(.node-disabled):hover{' +\n\t\t\t\t'background-color:' + this.options.onhoverColor + ';' +\n\t\t\t'}';\n\t\t}\n\n\t\treturn this.css + style;\n\t};\n\n\tTree.prototype.template = {\n\t\tlist: '<ul class=\"list-group\"></ul>',\n\t\titem: '<li class=\"list-group-item\"></li>',\n\t\tindent: '<span class=\"indent\"></span>',\n\t\ticon: '<span class=\"icon\"></span>',\n\t\tlink: '<a href=\"#\" style=\"color:inherit;\"></a>',\n\t\tbadge: '<span class=\"badge\"></span>'\n\t};\n\n\tTree.prototype.css = '.treeview span.indent{margin-left:10px;margin-right:10px}.treeview span.icon{width:12px;margin-right:5px}.treeview .node-disabled{color:silver;cursor:not-allowed}'\n\n\n\t/**\n\t\tReturns a single node object that matches the given node id.\n\t\t@param {Number} nodeId - A node's unique identifier\n\t\t@return {Object} node - Matching node\n\t*/\n\tTree.prototype.getNode = function (nodeId) {\n\t\treturn this.nodes[nodeId];\n\t};\n\n\t/**\n\t\tReturns the parent node of a given node, if valid otherwise returns undefined.\n\t\t@param {Object|Number} identifier - A valid node or node id\n\t\t@returns {Object} node - The parent node\n\t*/\n\tTree.prototype.getParent = function (identifier) {\n\t\tvar node = this.identifyNode(identifier);\n\t\treturn this.nodes[node.parentId];\n\t};\n\n\t/**\n\t\tReturns an array of sibling nodes for a given node, if valid otherwise returns undefined.\n\t\t@param {Object|Number} identifier - A valid node or node id\n\t\t@returns {Array} nodes - Sibling nodes\n\t*/\n\tTree.prototype.getSiblings = function (identifier) {\n\t\tvar node = this.identifyNode(identifier);\n\t\tvar parent = this.getParent(node);\n\t\tvar nodes = parent ? parent.nodes : this.tree;\n\t\treturn nodes.filter(function (obj) {\n\t\t\t\treturn obj.nodeId !== node.nodeId;\n\t\t\t});\n\t};\n\n\t/**\n\t\tReturns an array of selected nodes.\n\t\t@returns {Array} nodes - Selected nodes\n\t*/\n\tTree.prototype.getSelected = function () {\n\t\treturn this.findNodes('true', 'g', 'state.selected');\n\t};\n\n\t/**\n\t\tReturns an array of unselected nodes.\n\t\t@returns {Array} nodes - Unselected nodes\n\t*/\n\tTree.prototype.getUnselected = function () {\n\t\treturn this.findNodes('false', 'g', 'state.selected');\n\t};\n\n\t/**\n\t\tReturns an array of expanded nodes.\n\t\t@returns {Array} nodes - Expanded nodes\n\t*/\n\tTree.prototype.getExpanded = function () {\n\t\treturn this.findNodes('true', 'g', 'state.expanded');\n\t};\n\n\t/**\n\t\tReturns an array of collapsed nodes.\n\t\t@returns {Array} nodes - Collapsed nodes\n\t*/\n\tTree.prototype.getCollapsed = function () {\n\t\treturn this.findNodes('false', 'g', 'state.expanded');\n\t};\n\n\t/**\n\t\tReturns an array of checked nodes.\n\t\t@returns {Array} nodes - Checked nodes\n\t*/\n\tTree.prototype.getChecked = function () {\n\t\treturn this.findNodes('true', 'g', 'state.checked');\n\t};\n\n\t/**\n\t\tReturns an array of unchecked nodes.\n\t\t@returns {Array} nodes - Unchecked nodes\n\t*/\n\tTree.prototype.getUnchecked = function () {\n\t\treturn this.findNodes('false', 'g', 'state.checked');\n\t};\n\n\t/**\n\t\tReturns an array of disabled nodes.\n\t\t@returns {Array} nodes - Disabled nodes\n\t*/\n\tTree.prototype.getDisabled = function () {\n\t\treturn this.findNodes('true', 'g', 'state.disabled');\n\t};\n\n\t/**\n\t\tReturns an array of enabled nodes.\n\t\t@returns {Array} nodes - Enabled nodes\n\t*/\n\tTree.prototype.getEnabled = function () {\n\t\treturn this.findNodes('false', 'g', 'state.disabled');\n\t};\n\n\n\t/**\n\t\tSet a node state to selected\n\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t@param {optional Object} options\n\t*/\n\tTree.prototype.selectNode = function (identifiers, options) {\n\t\tthis.forEachIdentifier(identifiers, options, $.proxy(function (node, options) {\n\t\t\tthis.setSelectedState(node, true, options);\n\t\t}, this));\n\n\t\tthis.render();\n\t};\n\n\t/**\n\t\tSet a node state to unselected\n\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t@param {optional Object} options\n\t*/\n\tTree.prototype.unselectNode = function (identifiers, options) {\n\t\tthis.forEachIdentifier(identifiers, options, $.proxy(function (node, options) {\n\t\t\tthis.setSelectedState(node, false, options);\n\t\t}, this));\n\n\t\tthis.render();\n\t};\n\n\t/**\n\t\tToggles a node selected state; selecting if unselected, unselecting if selected.\n\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t@param {optional Object} options\n\t*/\n\tTree.prototype.toggleNodeSelected = function (identifiers, options) {\n\t\tthis.forEachIdentifier(identifiers, options, $.proxy(function (node, options) {\n\t\t\tthis.toggleSelectedState(node, options);\n\t\t}, this));\n\n\t\tthis.render();\n\t};\n\n\n\t/**\n\t\tCollapse all tree nodes\n\t\t@param {optional Object} options\n\t*/\n\tTree.prototype.collapseAll = function (options) {\n\t\tvar identifiers = this.findNodes('true', 'g', 'state.expanded');\n\t\tthis.forEachIdentifier(identifiers, options, $.proxy(function (node, options) {\n\t\t\tthis.setExpandedState(node, false, options);\n\t\t}, this));\n\n\t\tthis.render();\n\t};\n\n\t/**\n\t\tCollapse a given tree node\n\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t@param {optional Object} options\n\t*/\n\tTree.prototype.collapseNode = function (identifiers, options) {\n\t\tthis.forEachIdentifier(identifiers, options, $.proxy(function (node, options) {\n\t\t\tthis.setExpandedState(node, false, options);\n\t\t}, this));\n\n\t\tthis.render();\n\t};\n\n\t/**\n\t\tExpand all tree nodes\n\t\t@param {optional Object} options\n\t*/\n\tTree.prototype.expandAll = function (options) {\n\t\toptions = $.extend({}, _default.options, options);\n\n\t\tif (options && options.levels) {\n\t\t\tthis.expandLevels(this.tree, options.levels, options);\n\t\t}\n\t\telse {\n\t\t\tvar identifiers = this.findNodes('false', 'g', 'state.expanded');\n\t\t\tthis.forEachIdentifier(identifiers, options, $.proxy(function (node, options) {\n\t\t\t\tthis.setExpandedState(node, true, options);\n\t\t\t}, this));\n\t\t}\n\n\t\tthis.render();\n\t};\n\n\t/**\n\t\tExpand a given tree node\n\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t@param {optional Object} options\n\t*/\n\tTree.prototype.expandNode = function (identifiers, options) {\n\t\tthis.forEachIdentifier(identifiers, options, $.proxy(function (node, options) {\n\t\t\tthis.setExpandedState(node, true, options);\n\t\t\tif (node.nodes && (options && options.levels)) {\n\t\t\t\tthis.expandLevels(node.nodes, options.levels-1, options);\n\t\t\t}\n\t\t}, this));\n\n\t\tthis.render();\n\t};\n\n\tTree.prototype.expandLevels = function (nodes, level, options) {\n\t\toptions = $.extend({}, _default.options, options);\n\n\t\t$.each(nodes, $.proxy(function (index, node) {\n\t\t\tthis.setExpandedState(node, (level > 0) ? true : false, options);\n\t\t\tif (node.nodes) {\n\t\t\t\tthis.expandLevels(node.nodes, level-1, options);\n\t\t\t}\n\t\t}, this));\n\t};\n\n\t/**\n\t\tReveals a given tree node, expanding the tree from node to root.\n\t\t@param {Object|Number|Array} identifiers - A valid node, node id or array of node identifiers\n\t\t@param {optional Object} options\n\t*/\n\tTree.prototype.revealNode = function (identifiers, options) {\n\t\tthis.forEachIdentifier(identifiers, options, $.proxy(function (node, options) {\n\t\t\tvar parentNode = this.getParent(node);\n\t\t\twhile (parentNode) {\n\t\t\t\tthis.setExpandedState(parentNode, true, options);\n\t\t\t\tparentNode = this.getParent(parentNode);\n\t\t\t};\n\t\t}, this));\n\n\t\tthis.render();\n\t};\n\n\t/**\n\t\tToggles a nodes expanded state; collapsing if expanded, expanding if collapsed.\n\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t@param {optional Object} options\n\t*/\n\tTree.prototype.toggleNodeExpanded = function (identifiers, options) {\n\t\tthis.forEachIdentifier(identifiers, options, $.proxy(function (node, options) {\n\t\t\tthis.toggleExpandedState(node, options);\n\t\t}, this));\n\t\t\n\t\tthis.render();\n\t};\n\n\n\t/**\n\t\tCheck all tree nodes\n\t\t@param {optional Object} options\n\t*/\n\tTree.prototype.checkAll = function (options) {\n\t\tvar identifiers = this.findNodes('false', 'g', 'state.checked');\n\t\tthis.forEachIdentifier(identifiers, options, $.proxy(function (node, options) {\n\t\t\tthis.setCheckedState(node, true, options);\n\t\t}, this));\n\n\t\tthis.render();\n\t};\n\n\t/**\n\t\tCheck a given tree node\n\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t@param {optional Object} options\n\t*/\n\tTree.prototype.checkNode = function (identifiers, options) {\n\t\tthis.forEachIdentifier(identifiers, options, $.proxy(function (node, options) {\n\t\t\tthis.setCheckedState(node, true, options);\n\t\t}, this));\n\n\t\tthis.render();\n\t};\n\n\t/**\n\t\tUncheck all tree nodes\n\t\t@param {optional Object} options\n\t*/\n\tTree.prototype.uncheckAll = function (options) {\n\t\tvar identifiers = this.findNodes('true', 'g', 'state.checked');\n\t\tthis.forEachIdentifier(identifiers, options, $.proxy(function (node, options) {\n\t\t\tthis.setCheckedState(node, false, options);\n\t\t}, this));\n\n\t\tthis.render();\n\t};\n\n\t/**\n\t\tUncheck a given tree node\n\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t@param {optional Object} options\n\t*/\n\tTree.prototype.uncheckNode = function (identifiers, options) {\n\t\tthis.forEachIdentifier(identifiers, options, $.proxy(function (node, options) {\n\t\t\tthis.setCheckedState(node, false, options);\n\t\t}, this));\n\n\t\tthis.render();\n\t};\n\n\t/**\n\t\tToggles a nodes checked state; checking if unchecked, unchecking if checked.\n\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t@param {optional Object} options\n\t*/\n\tTree.prototype.toggleNodeChecked = function (identifiers, options) {\n\t\tthis.forEachIdentifier(identifiers, options, $.proxy(function (node, options) {\n\t\t\tthis.toggleCheckedState(node, options);\n\t\t}, this));\n\n\t\tthis.render();\n\t};\n\n\n\t/**\n\t\tDisable all tree nodes\n\t\t@param {optional Object} options\n\t*/\n\tTree.prototype.disableAll = function (options) {\n\t\tvar identifiers = this.findNodes('false', 'g', 'state.disabled');\n\t\tthis.forEachIdentifier(identifiers, options, $.proxy(function (node, options) {\n\t\t\tthis.setDisabledState(node, true, options);\n\t\t}, this));\n\n\t\tthis.render();\n\t};\n\n\t/**\n\t\tDisable a given tree node\n\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t@param {optional Object} options\n\t*/\n\tTree.prototype.disableNode = function (identifiers, options) {\n\t\tthis.forEachIdentifier(identifiers, options, $.proxy(function (node, options) {\n\t\t\tthis.setDisabledState(node, true, options);\n\t\t}, this));\n\n\t\tthis.render();\n\t};\n\n\t/**\n\t\tEnable all tree nodes\n\t\t@param {optional Object} options\n\t*/\n\tTree.prototype.enableAll = function (options) {\n\t\tvar identifiers = this.findNodes('true', 'g', 'state.disabled');\n\t\tthis.forEachIdentifier(identifiers, options, $.proxy(function (node, options) {\n\t\t\tthis.setDisabledState(node, false, options);\n\t\t}, this));\n\n\t\tthis.render();\n\t};\n\n\t/**\n\t\tEnable a given tree node\n\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t@param {optional Object} options\n\t*/\n\tTree.prototype.enableNode = function (identifiers, options) {\n\t\tthis.forEachIdentifier(identifiers, options, $.proxy(function (node, options) {\n\t\t\tthis.setDisabledState(node, false, options);\n\t\t}, this));\n\n\t\tthis.render();\n\t};\n\n\t/**\n\t\tToggles a nodes disabled state; disabling is enabled, enabling if disabled.\n\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t@param {optional Object} options\n\t*/\n\tTree.prototype.toggleNodeDisabled = function (identifiers, options) {\n\t\tthis.forEachIdentifier(identifiers, options, $.proxy(function (node, options) {\n\t\t\tthis.setDisabledState(node, !node.state.disabled, options);\n\t\t}, this));\n\n\t\tthis.render();\n\t};\n\n\n\t/**\n\t\tCommon code for processing multiple identifiers\n\t*/\n\tTree.prototype.forEachIdentifier = function (identifiers, options, callback) {\n\n\t\toptions = $.extend({}, _default.options, options);\n\n\t\tif (!(identifiers instanceof Array)) {\n\t\t\tidentifiers = [identifiers];\n\t\t}\n\n\t\t$.each(identifiers, $.proxy(function (index, identifier) {\n\t\t\tcallback(this.identifyNode(identifier), options);\n\t\t}, this));\t\n\t};\n\n\t/*\n\t\tIdentifies a node from either a node id or object\n\t*/\n\tTree.prototype.identifyNode = function (identifier) {\n\t\treturn ((typeof identifier) === 'number') ?\n\t\t\t\t\t\tthis.nodes[identifier] :\n\t\t\t\t\t\tidentifier;\n\t};\n\n\t/**\n\t\tSearches the tree for nodes (text) that match given criteria\n\t\t@param {String} pattern - A given string to match against\n\t\t@param {optional Object} options - Search criteria options\n\t\t@return {Array} nodes - Matching nodes\n\t*/\n\tTree.prototype.search = function (pattern, options) {\n\t\toptions = $.extend({}, _default.searchOptions, options);\n\n\t\tthis.clearSearch({ render: false });\n\n\t\tvar results = [];\n\t\tif (pattern && pattern.length > 0) {\n\n\t\t\tif (options.exactMatch) {\n\t\t\t\tpattern = '^' + pattern + '$';\n\t\t\t}\n\n\t\t\tvar modifier = 'g';\n\t\t\tif (options.ignoreCase) {\n\t\t\t\tmodifier += 'i';\n\t\t\t}\n\n\t\t\tresults = this.findNodes(pattern, modifier);\n\n\t\t\t// Add searchResult property to all matching nodes\n\t\t\t// This will be used to apply custom styles\n\t\t\t// and when identifying result to be cleared\n\t\t\t$.each(results, function (index, node) {\n\t\t\t\tnode.searchResult = true;\n\t\t\t})\n\t\t}\n\n\t\t// If revealResults, then render is triggered from revealNode\n\t\t// otherwise we just call render.\n\t\tif (options.revealResults) {\n\t\t\tthis.revealNode(results);\n\t\t}\n\t\telse {\n\t\t\tthis.render();\n\t\t}\n\n\t\tthis.$element.trigger('searchComplete', $.extend(true, {}, results));\n\n\t\treturn results;\n\t};\n\n\t/**\n\t\tClears previous search results\n\t*/\n\tTree.prototype.clearSearch = function (options) {\n\n\t\toptions = $.extend({}, { render: true }, options);\n\n\t\tvar results = $.each(this.findNodes('true', 'g', 'searchResult'), function (index, node) {\n\t\t\tnode.searchResult = false;\n\t\t});\n\n\t\tif (options.render) {\n\t\t\tthis.render();\t\n\t\t}\n\t\t\n\t\tthis.$element.trigger('searchCleared', $.extend(true, {}, results));\n\t};\n\n\t/**\n\t\tFind nodes that match a given criteria\n\t\t@param {String} pattern - A given string to match against\n\t\t@param {optional String} modifier - Valid RegEx modifiers\n\t\t@param {optional String} attribute - Attribute to compare pattern against\n\t\t@return {Array} nodes - Nodes that match your criteria\n\t*/\n\tTree.prototype.findNodes = function (pattern, modifier, attribute) {\n\n\t\tmodifier = modifier || 'g';\n\t\tattribute = attribute || 'text';\n\n\t\tvar _this = this;\n\t\treturn $.grep(this.nodes, function (node) {\n\t\t\tvar val = _this.getNodeValue(node, attribute);\n\t\t\tif (typeof val === 'string') {\n\t\t\t\treturn val.match(new RegExp(pattern, modifier));\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t\tRecursive find for retrieving nested attributes values\n\t\tAll values are return as strings, unless invalid\n\t\t@param {Object} obj - Typically a node, could be any object\n\t\t@param {String} attr - Identifies an object property using dot notation\n\t\t@return {String} value - Matching attributes string representation\n\t*/\n\tTree.prototype.getNodeValue = function (obj, attr) {\n\t\tvar index = attr.indexOf('.');\n\t\tif (index > 0) {\n\t\t\tvar _obj = obj[attr.substring(0, index)];\n\t\t\tvar _attr = attr.substring(index + 1, attr.length);\n\t\t\treturn this.getNodeValue(_obj, _attr);\n\t\t}\n\t\telse {\n\t\t\tif (obj.hasOwnProperty(attr)) {\n\t\t\t\treturn obj[attr].toString();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\t};\n\n\tvar logError = function (message) {\n\t\tif (window.console) {\n\t\t\twindow.console.error(message);\n\t\t}\n\t};\n\n\t// Prevent against multiple instantiations,\n\t// handle updates and method calls\n\t$.fn[pluginName] = function (options, args) {\n\n\t\tvar result;\n\n\t\tthis.each(function () {\n\t\t\tvar _this = $.data(this, pluginName);\n\t\t\tif (typeof options === 'string') {\n\t\t\t\tif (!_this) {\n\t\t\t\t\tlogError('Not initialized, can not call method : ' + options);\n\t\t\t\t}\n\t\t\t\telse if (!$.isFunction(_this[options]) || options.charAt(0) === '_') {\n\t\t\t\t\tlogError('No such method : ' + options);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (!(args instanceof Array)) {\n\t\t\t\t\t\targs = [ args ];\n\t\t\t\t\t}\n\t\t\t\t\tresult = _this[options].apply(_this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (typeof options === 'boolean') {\n\t\t\t\tresult = _this;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$.data(this, pluginName, new Tree(this, $.extend(true, {}, options)));\n\t\t\t}\n\t\t});\n\n\t\treturn result || this;\n\t};\n\n})(jQuery, window, document);\n"]}